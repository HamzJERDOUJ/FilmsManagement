package com.films.management.models.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import com.films.management.models.Admin;

/**
 * Class _Film was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Film extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "Id";

    public static final Property<Integer> AGE = Property.create("age", Integer.class);
    public static final Property<String> DESCRIPTION = Property.create("description", String.class);
    public static final Property<Float> DURATION = Property.create("duration", Float.class);
    public static final Property<String> LINK = Property.create("link", String.class);
    public static final Property<String> NAME = Property.create("name", String.class);
    public static final Property<String> PHOTO = Property.create("photo", String.class);
    public static final Property<String> QUALITY = Property.create("quality", String.class);
    public static final Property<Float> RATING = Property.create("rating", Float.class);
    public static final Property<String> TYPE = Property.create("type", String.class);
    public static final Property<Integer> YEAR = Property.create("year", Integer.class);
    public static final Property<Admin> MANAGED = Property.create("managed", Admin.class);

    protected int age;
    protected String description;
    protected float duration;
    protected String link;
    protected String name;
    protected String photo;
    protected String quality;
    protected float rating;
    protected String type;
    protected int year;

    protected Object managed;

    public void setAge(int age) {
        beforePropertyWrite("age", this.age, age);
        this.age = age;
    }

    public int getAge() {
        beforePropertyRead("age");
        return this.age;
    }

    public void setDescription(String description) {
        beforePropertyWrite("description", this.description, description);
        this.description = description;
    }

    public String getDescription() {
        beforePropertyRead("description");
        return this.description;
    }

    public void setDuration(float duration) {
        beforePropertyWrite("duration", this.duration, duration);
        this.duration = duration;
    }

    public float getDuration() {
        beforePropertyRead("duration");
        return this.duration;
    }

    public void setLink(String link) {
        beforePropertyWrite("link", this.link, link);
        this.link = link;
    }

    public String getLink() {
        beforePropertyRead("link");
        return this.link;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setPhoto(String photo) {
        beforePropertyWrite("photo", this.photo, photo);
        this.photo = photo;
    }

    public String getPhoto() {
        beforePropertyRead("photo");
        return this.photo;
    }

    public void setQuality(String quality) {
        beforePropertyWrite("quality", this.quality, quality);
        this.quality = quality;
    }

    public String getQuality() {
        beforePropertyRead("quality");
        return this.quality;
    }

    public void setRating(float rating) {
        beforePropertyWrite("rating", this.rating, rating);
        this.rating = rating;
    }

    public float getRating() {
        beforePropertyRead("rating");
        return this.rating;
    }

    public void setType(String type) {
        beforePropertyWrite("type", this.type, type);
        this.type = type;
    }

    public String getType() {
        beforePropertyRead("type");
        return this.type;
    }

    public void setYear(int year) {
        beforePropertyWrite("year", this.year, year);
        this.year = year;
    }

    public int getYear() {
        beforePropertyRead("year");
        return this.year;
    }

    public void setManaged(Admin managed) {
        setToOneTarget("managed", managed, true);
    }

    public Admin getManaged() {
        return (Admin)readProperty("managed");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "age":
                return this.age;
            case "description":
                return this.description;
            case "duration":
                return this.duration;
            case "link":
                return this.link;
            case "name":
                return this.name;
            case "photo":
                return this.photo;
            case "quality":
                return this.quality;
            case "rating":
                return this.rating;
            case "type":
                return this.type;
            case "year":
                return this.year;
            case "managed":
                return this.managed;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "age":
                this.age = val == null ? 0 : (int)val;
                break;
            case "description":
                this.description = (String)val;
                break;
            case "duration":
                this.duration = val == null ? 0 : (float)val;
                break;
            case "link":
                this.link = (String)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "photo":
                this.photo = (String)val;
                break;
            case "quality":
                this.quality = (String)val;
                break;
            case "rating":
                this.rating = val == null ? 0 : (float)val;
                break;
            case "type":
                this.type = (String)val;
                break;
            case "year":
                this.year = val == null ? 0 : (int)val;
                break;
            case "managed":
                this.managed = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeInt(this.age);
        out.writeObject(this.description);
        out.writeFloat(this.duration);
        out.writeObject(this.link);
        out.writeObject(this.name);
        out.writeObject(this.photo);
        out.writeObject(this.quality);
        out.writeFloat(this.rating);
        out.writeObject(this.type);
        out.writeInt(this.year);
        out.writeObject(this.managed);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.age = in.readInt();
        this.description = (String)in.readObject();
        this.duration = in.readFloat();
        this.link = (String)in.readObject();
        this.name = (String)in.readObject();
        this.photo = (String)in.readObject();
        this.quality = (String)in.readObject();
        this.rating = in.readFloat();
        this.type = (String)in.readObject();
        this.year = in.readInt();
        this.managed = in.readObject();
    }

}
